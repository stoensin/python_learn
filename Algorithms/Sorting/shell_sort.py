# -*- coding: utf-8 -*-

"""
希尔排序原理：
    在序列中，找到一个中间的位置，然后将该序列分成左右两个序列，
再将左边序列第一个值与右边序列第一个值进行比较，如果左边大于右边，则进行交换，持续下去，
将左右两个序列比较完成后，左右两个序列又分别取中间位置，分成4个序列，再分别在这四个序列中取出第一个数，
进行比较，使得四个序列的第一个数是按照从小到大排列的，这样依次下去，直到把四个序列的值都对比完成后，
再从这四个序列中再取中间数，将四个序列拆成八个序列，在进行比较，
到最后，拆成的序列数量为原来序列长度的一半的时候，原来序列中奇数位置的值都有序了，偶数位置的值也都有序了，
这时候再进行最后一次比较，拆出的序列数量等于原来序列长度，这时候再经过一次排序，整个序列有序了。

希尔排序的时间复杂度是O(nlog2n),是一种不稳定的排序算法，逻辑比较复杂


希尔排序的实质就是分组插入排序，该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。
希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。
希尔排序是基于插入排序的以下两点性质而提出改进方法的：
插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率
但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位
"""

def shell_sort(arr):
    # 设定步长
    length = len(arr)
    grep = length>>1
    while grep:
        for i in range(grep, length):
            # 类似插入排序, 当前值与指定步长之前的值比较, 符合条件则交换位置
            while i>=grep and arr[i-grep]>arr[i]:
                arr[i-grep], arr[i] = arr[i], arr[i-grep]
                i -= grep
        grep = grep>>1
    return arr

"""

希尔排序是插入排序的扩展，通过允许非相邻的元素进行交换来提高执行效率。
希尔排序最关键的是选择步长，本程序选用Knuth在1969年提出的步长序列：1 4 13 40 121 364 1093 3280 。。。
后一个元素是前一个元素*3+1，非常方便选取，而且效率还不错。


缩小增量排序法
希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，
特定情况下可以准确估算出关键码的比较次数和记录的移动次数。目前还没有人给出选取最好的增量因子序列的方法。
增量因子序列可以有各种取法，有取奇数的，也有取质数的，但需要注意：增量因子中除1 外没有公因子，且最后一个增量因子必须为1。希尔排序方法是一个不稳定的排序方法。

首先要明确一下增量的取法(这里图片是copy别人博客的，增量是奇数，我下面的编程用的是偶数)：
      第一次增量的取法为： d=count/2;
      第二次增量的取法为:  d=(count/2)/2;
      最后一直到: d=1;
"""
def shell_sort_by_step(arr):
    length = len(arr)
    if length>3:
        step = 3
    elif length<2:
        return arr
    else:
        step = 2
    # 设定步长
    grep = 0
    while grep<length/step:
        grep = grep*step+1

    while grep>=1:
        for i in xrange(grep, length):
            while i>=grep and arr[i-grep]>arr[i]:
                arr[i-grep], arr[i] = arr[i], arr[i-grep]
                i -= grep
        grep //= step
    return arr



if __name__ == "__main__":
    list1 = [0, 9, 1, 3, 2, 5, 4, 12, 2, 3, 5]
    list1=shell_sort(list1)
    print list1

    list1 = [0, 9, 1, 3, 2, 5, 4, 12, 2, 3, 5]
    list1=shell_sort_by_step(list1)
    print list1