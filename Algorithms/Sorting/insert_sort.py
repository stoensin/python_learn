# -*- coding: utf-8 -*-

"""
插入排序原理：
从第二个值开始，假定这个值的左边都是有序的序列，找到左边的有序序列中，该值应该插入的位置，
然后将这个值插入到 相应的位置，使得左边的序列依旧有序，然后将这个值丢弃。这样执行下去，到最后将整个序列形成一个有序的序列。

插入排序算法在python中的执行时间比冒泡排序短，但是也是属于一个数量级的时间。
至于为什么插入排序算法比冒泡排序算法的时间短一半左右，应该也是由于list的内部实现机制的关系，列表由数组组成，
在将右边的无序序列中的第一个元素插入到左边的有序序列的时候，右边的元素位置不需要移动，只需要移动左边的序列元素，
这样比冒泡排序每次移动所花费的时间要少，平均下来，每次移动的时间要少一半左右。
插入排序的时间复杂度是O(n**2),是一种稳定的排序算法，逻辑比较简单


############################################################
插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
步骤
1. 从第一个元素开始，该元素可以认为已经被排序
2. 取出下一个元素，在已经排序的元素序列中从后向前扫描
3. 如果该元素（已排序）大于新元素，将该元素移到下一位置
4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置
5. 将新元素插入到该位置后
6. 重复步骤2~5
"""

def insert_sort(arr):
    length = len(arr)
    for i in range(1, length):
        j = i
        while j and arr[j-1] > arr[i]:
            j -= 1
        arr.insert(j, arr.pop(i))
    return arr


############################################################
def insert_sort2(list):
    n = len(list)
    for i in range(1, n):
        # 后一个元素和前一个元素比较
        # 如果比前一个小
        if list[i] < list[i - 1]:
            # 将这个数取出
            temp = list[i]
            # 保存下标
            index = i
            # 从后往前依次比较每个元素
            for j in range(i - 1, -1, -1):
                # 和比取出元素大的元素交换
                if list[j] > temp:
                    list[j + 1] = list[j]
                    index = j
                else:
                    break
            # 插入元素
            list[index] = temp
    return list

if __name__ == "__main__":
    list1 = [1, 3, 2, 5, 4]
    list1 = insert_sort(list1)
    print list1

    list1 = [1, 3, 2, 5, 4]
    list1 = insert_sort2(list1)
    print list1




