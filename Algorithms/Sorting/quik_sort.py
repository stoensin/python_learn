# -*- coding: utf-8 -*-

"""
快速排序原理：在序列中找到一个定位点（一般是第一个点）然后将比这个点的值大的值挪到它的右边，比这个值小的值挪到它的左边，最后返回 该点的位置。
通过递归调用该方法，将序列分成左右两个序列，然后再细分下去，到最后每个序列中只有两个元素，这两个元素被排好序后返回到上一层，最后返回的将是排序好的序列。
快速排序的时间复杂度是O(nlog2n)，最坏情况时间复杂度O(n**2),是一种不稳定的算法，逻辑比较复杂
其实快速排序想要进行优化的话，要找到一个合适的定位点，这个定位点如果总是第一个点的话，当这个点取到的值是最大的值，之后假如每次递归取到的第一个点都是最大的值，
那么，这就是快速排序最坏的情况了，这时候。。。递归树就变成了一个序列了。。。是一颗非常不平衡的树。
但是如果每次找这个点之前能找到一个合适的点的话，就能够使得递归树变成一颗平衡树，这样就能达到快速排序的最好情况。
所以，优化就在这个定位点的选取上，如果总是能把定位点选取合适，那么快速排序是一个非常好的稳定的排序算法。

快速排序算法速度非常快，但是还是比list内置排序法时间上慢了一个数量级，但是，比归并排序少了一半左右的时间，至于为什么比快速排序要快。。。这个我目前还没有找到好的解释办法。。。


快速排序也是一种分治思想，基本思想是先随便在无序列表中找一个元素，以这个元素为基准，其他所有元素都跟该元素比，
比该元素小的成为一个子序列，比该元素大的成为另一个子序列，接着重复此过程，最终达到排序效果。我们也用递归的方式来实现。


############################################################
快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。
步骤
1. 从数列中挑出一个元素，称为”基准”（pivot），
2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。
3. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。
"""

def quik_sort(arr):
    length = len(arr)
    if length<2: return arr
    smaller = []
    greater = []
    # 将第一个值做为基准
    pivot = arr.pop(0)
    for item in arr:
        if pivot<item:
            # 将比基准大的值放到more数列
            greater.append(item)
        else:
            # 将比基准小的值放到smaller数列
            smaller.append(item)
    # 递归返回
    return quik_sort(smaller) + [pivot] + quik_sort(greater)

############################################################
# 生成器
def quik_sort2(arr):
    if len(arr)<2: return arr

    pivot = arr[0]
    return quik_sort2([x for x in arr[1:] if x < pivot]) + [pivot] + quik_sort2([x for x in arr[1:] if x >= pivot])

############################################################
# 语法糖
qsort = lambda xs : (
    (len(xs) <= 1 and [xs]) or [
        qsort( [x for x in xs[1:] if x < xs[0]] ) + [xs[0]] + qsort( [x for x in xs[1:] if x >= xs[0]] )
    ]
)[0]

if __name__ == "__main__":
    list1 = [0, 9, 1, 3, 2, 5, 4, 12, 2, 3, 5]
    list1=quik_sort(list1)
    print list1

    list1 = [0, 9, 1, 3, 2, 5, 4, 12, 2, 3, 5]
    list1=quik_sort2(list1)
    print list1

    list1 = [0, 9, 1, 3, 2, 5, 4, 12, 2, 3, 5]
    list1=qsort(list1)
    print list1
